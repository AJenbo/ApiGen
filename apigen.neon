parameters:
	# string[], passed as arguments in CLI, e.g. ['src']
	paths: []

	# string[], --include in CLI, included files mask, e.g. ['*.php']
	include: ['*.php']

	# string[], --exclude in CLI, excluded files mask, e.g. ['tests/**']
	exclude: []

	# bool, should protected members be excluded?
	excludeProtected: false

	# bool, should private members be excluded?
	excludePrivate: true

	# string[], list of tags used for excluding class-likes and members
	excludeTagged: ['internal']

	# string, --output in CLI
	outputDir: '%workingDir%/api'

	# string | null
	templatesDir: null

	# string, --title in CLI
	title: 'API Documentation'

	# string, --base-url in CLI
	baseUrl: ''

	# int, --workers in CLI
	workerCount: 8

	# string, --memory-limit in CLI
	memoryLimit: '512M'


php:
	memory_limit: %memoryLimit%


services:
	# ApiGen
	apigen:
		factory: ApiGenX\ApiGen(paths: %paths%, include: %include%, exclude: %exclude%)

	# Locator
	locator:
		factory: ApiGenX\Locator::create(projectDir: %workingDir%)

	# Analyzer
	analyzer.bodySkipper:
		factory: ApiGenX\Analyzer\NodeVisitors\BodySkipper

	analyze.phpDocResolver:
		factory: ApiGenX\Analyzer\NodeVisitors\PhpDocResolver

	analyzer.nodeTraverser:
		type: PhpParser\NodeTraverserInterface
		factory: PhpParser\NodeTraverser
		setup!:
			- addVisitor(@ApiGenX\Analyzer\NodeVisitors\BodySkipper)
			- addVisitor(@PhpParser\NodeVisitor\NameResolver)
			- addVisitor(@ApiGenX\Analyzer\NodeVisitors\PhpDocResolver)

	analyzer.filter:
		factory: ApiGenX\Analyzer\Filter(excludeProtected: %excludeProtected%, excludePrivate: %excludePrivate%, excludeTagged: %excludeTagged%)

	analyzer:
		factory: ApiGenX\Analyzer

	# Indexer
	indexer:
		factory: ApiGenX\Indexer

	# Renderer
	renderer.urlGenerator:
		factory: ApiGenX\Renderer\UrlGenerator(ApiGenX\Helpers::baseDir(%paths%), %baseUrl%)

	renderer.sourceHighlighter:
		factory: ApiGenX\Renderer\SourceHighlighter

	renderer.latte.functions:
		factory: ApiGenX\Renderer\Latte\LatteFunctions

	renderer.latte.engineFactory:
		factory: ApiGenX\Renderer\Latte\LatteEngineFactory(tempDir: %tempDir%, templatesDir: %templatesDir%)

	renderer.latte.engine:
		factory: @ApiGenX\Renderer\Latte\LatteEngineFactory::create()

	renderer:
		type: ApiGenX\Renderer
		factory: ApiGenX\Renderer\Latte\LatteRenderer(workerCount: %workerCount%, outputDir: %outputDir%, title: %title%)

	# league/commonmark
	commonMark:
		type: League\CommonMark\ConverterInterface
		factory: League\CommonMark\GithubFlavoredMarkdownConverter

	# nikic/php-parser
	phpParser.nameResolver:
		factory: PhpParser\NodeVisitor\NameResolver

	phpParser.nameContext:
		factory: @PhpParser\NodeVisitor\NameResolver::getNameContext()

	phpParser.factory:
		factory: PhpParser\ParserFactory

	phpParser:
		type: PhpParser\Parser
		factory: @PhpParser\ParserFactory::create(PhpParser\ParserFactory::PREFER_PHP7)

	# phpstan/phpdoc-parser
	phpDocParser.typeParser:
		factory: PHPStan\PhpDocParser\Parser\TypeParser

	phpDocParser.constExprParser:
		factory: PHPStan\PhpDocParser\Parser\ConstExprParser

	phpDocParser.lexer:
		factory: PHPStan\PhpDocParser\Lexer\Lexer

	phpDocParser:
		factory: PHPStan\PhpDocParser\Parser\PhpDocParser(requireWhitespaceBeforeDescription: true)

	# symfony/console
	symfonyConsole.output:
		type: Symfony\Component\Console\Style\OutputStyle
		imported: true
