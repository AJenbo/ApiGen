#!/usr/bin/env php
<?php declare(strict_types = 1);

use ApiGenX\ApiGenFactory;
use Composer\InstalledVersions;
use Nette\Utils\Finder;
use Nette\Utils\Strings;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\ConsoleOutputInterface;
use Symfony\Component\Console\SingleCommandApplication;
use Symfony\Component\Console\Style\SymfonyStyle;


if (is_file(__DIR__ . '/../vendor/autoload.php')) {
	require __DIR__ . '/../vendor/autoload.php';

} elseif (is_file(__DIR__ . '/../../../autoload.php')) {
	require __DIR__ . '/../../../autoload.php';

} else {
	fwrite(STDERR, "error: unable to find autoloader\n");
	exit(1);
}

ini_set('memory_limit', '512M');
Tracy\Debugger::$strictMode = true;
Tracy\Debugger::enable(Tracy\Debugger::DEVELOPMENT);
Latte\Bridges\Tracy\BlueScreenPanel::initialize(Tracy\Debugger::getBlueScreen());

$app = new SingleCommandApplication();
$app->setName('ApiGen');
$app->setVersion(InstalledVersions::getPrettyVersion('apigen/apigen'));

$app->addOption('source', 's', InputOption::VALUE_REQUIRED, 'source directory');
$app->addOption('include', 'i', InputOption::VALUE_REQUIRED | InputOption::VALUE_IS_ARRAY, 'includes files mask', ['*.php']);
$app->addOption('exclude', 'e', InputOption::VALUE_REQUIRED | InputOption::VALUE_IS_ARRAY, 'excluded files mask', ['temp/**', 'var/**', 'vendor/**']);
$app->addOption('output', 'o', InputOption::VALUE_REQUIRED, 'output directory');
$app->addOption('workers', 'w', InputOption::VALUE_REQUIRED, 'worker count', 8);

$app->setCode(function (InputInterface $input, ConsoleOutputInterface $output): int {
	$options = $input->getOptions();

	$workingDir = getcwd();
	$sourceDir = $options['source'] ?? $workingDir;
	$include = $options['include'];
	$exclude = $options['exclude'];
	$outputDir = $options['output'] ?? sprintf('%s/api', $workingDir);
	$title = 'API Documentation';
	$workerCount = (int) $options['workers'];

	if (!is_dir($sourceDir)) {
		$output->writeln("Directory '$sourceDir' does not exist");
		return 1;
	}

	$sourceDir = realpath($sourceDir);
	$files = Finder::findFiles(...$include)->exclude(...$exclude)->from($sourceDir);
	$files = array_keys(iterator_to_array($files));

	if (!count($files)) {
		$output->writeln("No source files found.");
		return 1;
	}

	$files = array_map('realpath', $files);
	$baseDir = Strings::findPrefix($files);
	$baseUrl = ''; // TODO!

	$style = new SymfonyStyle($input, $output);
	$style->title("ApiGen: Generating $title");

	$apiGenFactory = new ApiGenFactory();
	$apiGen = $apiGenFactory->create($style, $sourceDir, $baseDir, $baseUrl, $workerCount);
	$apiGen->generate($style, $files, $outputDir, $title);

	return 0;
});

$app->run();
