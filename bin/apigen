#!/usr/bin/env php
<?php declare(strict_types = 1);

use ApiGenX\ApiGen;
use ApiGenX\Bootstrap;
use Composer\InstalledVersions;
use Nette\Schema\Helpers;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\ConsoleOutputInterface;
use Symfony\Component\Console\SingleCommandApplication;
use Symfony\Component\Console\Style\SymfonyStyle;


if (is_file(__DIR__ . '/../vendor/autoload.php')) {
	require __DIR__ . '/../vendor/autoload.php';

} elseif (is_file(__DIR__ . '/../../../autoload.php')) {
	require __DIR__ . '/../../../autoload.php';

} else {
	fwrite(STDERR, "ERROR: unable to find autoloader\n");
	exit(1);
}

Bootstrap::configureErrorHandling();

$app = new SingleCommandApplication();
$app->setName('ApiGen');
$app->setVersion(InstalledVersions::getPrettyVersion('apigen/apigen'));
$app->addArgument('path', InputArgument::IS_ARRAY, 'path to analyze');
$app->addOption('config', 'c', InputOption::VALUE_REQUIRED, 'path to config file');
$app->addOption('include', 'i', InputOption::VALUE_REQUIRED | InputOption::VALUE_IS_ARRAY, 'includes files mask');
$app->addOption('exclude', 'e', InputOption::VALUE_REQUIRED | InputOption::VALUE_IS_ARRAY, 'excluded files mask');
$app->addOption('project-dir', 'p', InputOption::VALUE_REQUIRED, 'project directory, defaults to current working directory');
$app->addOption('temp', null, InputOption::VALUE_REQUIRED, 'temp directory, defaults to sys_get_temp_dir() . \'/apigen\'');
$app->addOption('workers', 'w', InputOption::VALUE_REQUIRED, 'worker count');
$app->addOption('memory-limit', null, InputOption::VALUE_REQUIRED, 'memory limit');
$app->addOption('title', 't', InputOption::VALUE_REQUIRED, 'title');
$app->addOption('base-url', null, InputOption::VALUE_REQUIRED, 'base URL');
$app->addOption('output', 'o', InputOption::VALUE_REQUIRED, 'output directory');

$app->setCode(function (InputInterface $input, ConsoleOutputInterface $output): int {
	$options = $input->getOptions();
	$paths = $input->getArgument('path');
	$style = new SymfonyStyle($input, $output);

	$systemTempDir = sys_get_temp_dir();
	$currentWorkingDir = getcwd();

	$tempDir = $options['temp'] ?? "$systemTempDir/apigen";

	$parameters = [
		'currentWorkingDir' => $currentWorkingDir,
		'systemTempDir' => $systemTempDir,
	];

	$optionsMapping = [
		'include' => 'include',
		'exclude' => 'exclude',
		'project-dir' => 'projectDir',
		'temp' => 'tempDir',
		'workers' => 'workerCount',
		'memory-limit' => 'memoryLimit',
		'title' => 'title',
		'base-url' => 'baseUrl',
		'output' => 'outputDir',
	];

	foreach ($optionsMapping as $optionKey => $parameterKey) {
		if (is_string($options[$optionKey])) {
			$parameters[$parameterKey] = $options[$optionKey];

		} elseif (is_array($options[$optionKey]) && count($options[$optionKey]) > 0) {
			$parameters[$parameterKey] = $options[$optionKey];
			$parameters[$parameterKey][Helpers::PREVENT_MERGING] = true;
		}
	}

	foreach ($paths as $path) {
		$parameters['paths'][] = $path;
		$parameters['paths'][Helpers::PREVENT_MERGING] = true;
	}

	$parameters = Bootstrap::resolvePaths($parameters, $currentWorkingDir);
	$container = Bootstrap::createContainer($style, $tempDir, $parameters, $options['config'] ?? null);
	$container->getByType(ApiGen::class)->generate($style);

	return Command::SUCCESS;
});

$app->run();
