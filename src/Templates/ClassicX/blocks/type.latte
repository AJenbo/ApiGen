{varType ApiGenX\Templates\ClassicX\GlobalParameters $global}

{define type, PHPStan\PhpDocParser\Ast\Type\TypeNode $type, bool $brackets = false, bool $short = true}{*
	*}{if $type === null}{*

	*}{elseif $type instanceof PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode}{*
		*}{var string $lower = strtolower($type)}{*
		*}{ifset $global->index->classLike[$lower]}{include classLikeLink, $global->index->classLike[$lower], $short}{else}{$type}{/ifset}{*

	*}{elseif $type instanceof PHPStan\PhpDocParser\Ast\Type\ArrayTypeNode}{*
		*}{include this, type: $type->type, brackets: true, short: $short}[]{*

	*}{elseif $type instanceof PHPStan\PhpDocParser\Ast\Type\ArrayShapeNode}{*
		*}array{{*
		*}{foreach $type->items as $item}{*
			*}{if $item->keyName}{*
				*}{$item->keyName}{*
				*}{if $item->optional}?{/if}: {*
			*}{/if}{*
			*}{include this, type: $item->valueType, brackets: true, short: $short}{*
			*}{sep}, {/sep}{*
		*}{/foreach}{*
		*}}{*

	*}{elseif $type instanceof PHPStan\PhpDocParser\Ast\Type\NullableTypeNode}{*
		*}?{include this, type: $type->type, brackets: true, short: $short}{*

	*}{elseif $type instanceof PHPStan\PhpDocParser\Ast\Type\UnionTypeNode}{*
		*}{if $brackets}({/if}{*
		*}{foreach $type->types as $innerType}{*
			*}{include this, type: $innerType, brackets: true, short: $short}{*
			*}{sep}|{/sep}{*
		*}{/foreach}{*
		*}{if $brackets}){/if}{*

	*}{elseif $type instanceof PHPStan\PhpDocParser\Ast\Type\IntersectionTypeNode}{*
		*}{if $brackets}({/if}{*
		*}{foreach $type->types as $innerType}{*
			*}{include this, type: $innerType, brackets: true, short: $short}{*
			*}{sep}&amp;{/sep}{*
		*}{/foreach}{*
		*}{if $brackets}){/if}{*

	*}{elseif $type instanceof PHPStan\PhpDocParser\Ast\Type\GenericTypeNode}{*
		*}{include this, type: $type->type, short: $short}{*
		*}&lt;{*
		*}{foreach $type->genericTypes as $genericType}{*
			*}{include this, type: $genericType, short: $short}{*
			*}{sep}, {/sep}{*
		*}{/foreach}{*
		*}&gt;{*

	*}{elseif $type instanceof PHPStan\PhpDocParser\Ast\Type\CallableTypeNode}{*
		*}{if $brackets}({/if}{*
		*}{include this, type: $type->identifier, short: $short}{*
		*}({*
		*}{foreach $type->parameters as $parameter}{*
			*}{include this, type: $parameter->type, short: $short}{*
			*}{if $parameter->isReference}&{/if}{if $parameter->isVariadic}...{/if}{*
			*}{if $parameter->parameterName && $parameter->type} {/if}{*
			*}{$parameter->parameterName}{*
			*}{sep}, {/sep}{*
		*}{/foreach}{*
		*}):&nbsp;{*
		*}{include this, type: $type->returnType, brackets: true, short: $short}{*
		*}{if $brackets}){/if}{*

	*}{elseif $type instanceof PHPStan\PhpDocParser\Ast\Type\ThisTypeNode}{*
		*}{$type}{*

	*}{elseif $type instanceof PHPStan\PhpDocParser\Ast\Type\ConstTypeNode}{*
		*}{$type}{*

	*}{else}{*
		*}UNRESOLVED{*
	*}{/if}{*
*}{/define}
